/***************************************************************
This code was generated by Spiral 6.0 beta, www.spiral.net --
Copyright (c) 2005-2008, Carnegie Mellon University.
All rights reserved.
The code is distributed under the GNU General Public License (GPL)
(see http://www.gnu.org/copyleft/gpl.html)

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
*AS IS* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
******************************************************************/

#ifndef AO40SHORT_SPIRAL_VIT_SCALAR_1280_H
#define AO40SHORT_SPIRAL_VIT_SCALAR_1280_H

#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define AO40SHORT_K 7
#define AO40SHORT_RATE 2
#define AO40SHORT_POLYS { 79, -109 }
#define AO40SHORT_NUMSTATES 64
#define AO40SHORT_FRAMEBITS 1280
#define AO40SHORT_DECISIONTYPE uint32_t
#define AO40SHORT_DECISIONTYPE_BITSIZE 32
#define AO40SHORT_COMPUTETYPE uint32_t

//ao40short_decision_t is a BIT vector
typedef union {
  AO40SHORT_DECISIONTYPE t[AO40SHORT_NUMSTATES/AO40SHORT_DECISIONTYPE_BITSIZE];
  uint32_t w[AO40SHORT_NUMSTATES/32];
  unsigned short s[AO40SHORT_NUMSTATES/16];
  unsigned char c[AO40SHORT_NUMSTATES/8];
} ao40short_decision_t __attribute__ ((aligned (16)));

typedef union {
  AO40SHORT_COMPUTETYPE t[AO40SHORT_NUMSTATES];
} ao40short_metric_t __attribute__ ((aligned (16)));

/* State info for instance of Viterbi decoder */
struct ao40short_v {
  __attribute__ ((aligned (16))) ao40short_metric_t metrics1; /* path metric buffer 1 */
  __attribute__ ((aligned (16))) ao40short_metric_t metrics2; /* path metric buffer 2 */
  ao40short_metric_t *old_metrics,*new_metrics; /* Pointers to path metrics, swapped on every bit */
  ao40short_decision_t *decisions;   /* decisions */
};

extern AO40SHORT_COMPUTETYPE ao40short_Branchtab[AO40SHORT_NUMSTATES/2*AO40SHORT_RATE] __attribute__ ((aligned (16)));

static const uint8_t ao40short_Partab[256] = {
  0x00, 0x01, 0x01, 0x00, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00, 0x01, 0x01, 0x00, 
  0x01, 0x00, 0x00, 0x01, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x01, 0x00, 0x00, 0x01, 
  0x01, 0x00, 0x00, 0x01, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x01, 0x00, 0x00, 0x01, 
  0x00, 0x01, 0x01, 0x00, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00, 0x01, 0x01, 0x00, 
  0x01, 0x00, 0x00, 0x01, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x01, 0x00, 0x00, 0x01, 
  0x00, 0x01, 0x01, 0x00, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00, 0x01, 0x01, 0x00, 
  0x00, 0x01, 0x01, 0x00, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00, 0x01, 0x01, 0x00, 
  0x01, 0x00, 0x00, 0x01, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x01, 0x00, 0x00, 0x01, 
  0x01, 0x00, 0x00, 0x01, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x01, 0x00, 0x00, 0x01, 
  0x00, 0x01, 0x01, 0x00, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00, 0x01, 0x01, 0x00, 
  0x00, 0x01, 0x01, 0x00, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00, 0x01, 0x01, 0x00, 
  0x01, 0x00, 0x00, 0x01, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x01, 0x00, 0x00, 0x01, 
  0x00, 0x01, 0x01, 0x00, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00, 0x01, 0x01, 0x00, 
  0x01, 0x00, 0x00, 0x01, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x01, 0x00, 0x00, 0x01, 
  0x01, 0x00, 0x00, 0x01, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x01, 0x00, 0x00, 0x01, 
  0x00, 0x01, 0x01, 0x00, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x01, 0x00, 0x01, 0x01, 0x00
};

static inline int ao40short_parity(uint32_t x){
  /* Fold down to one byte */
  x ^= (x >> 16);
  x ^= (x >> 8);
  return ao40short_Partab[x];
}

int ao40short_init_viterbi(void *p, int starting_state);
void *ao40short_create_viterbi(int len);
int ao40short_chainback_viterbi(void *p, uint8_t *data, uint32_t nbits, uint32_t endstate);
void ao40short_delete_viterbi(void *p);
int ao40short_update_viterbi_blk(void *p, AO40SHORT_COMPUTETYPE *syms, int nbits);

#endif
